{"ast":null,"code":"var _jsxFileName = \"/home/ad.rapidops.com/kishor.rathva/Worspace/hapi-mongo-ts/client/src/screens/OrderScreen.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButton } from 'react-paypal-button-v2';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { getOrderDetails, payOrder } from '../actions/orderActions';\nimport { ORDER_PAY_RESET } from '../constants/orderConstants';\n\nconst addDecimals = num => {\n  return (Math.round(num * 100) / 100).toFixed(2);\n};\n\nconst OrderScreen = ({\n  match\n}) => {\n  var _order$shippingAddres, _order$shippingAddres2, _order$shippingAddres3, _order$shippingAddres4;\n\n  // const orderId = match.params.id;\n  // console.log({ orderId });\n  const [sdkReady, setSdkReady] = useState(false);\n  const [orderId, setOrderId] = useState('');\n  const dispatch = useDispatch();\n  const {\n    order,\n    loading,\n    error\n  } = useSelector(state => state.orderDetails);\n  const {\n    loading: loadingPay,\n    success: successPay\n  } = useSelector(state => state.orderPay);\n\n  if (!loading && order) {\n    order.itemsPrice = addDecimals(order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0));\n  }\n\n  useEffect(() => {\n    setOrderId(match.params.id);\n\n    const addPayPalScript = async () => {\n      const {\n        data: clientId\n      } = await axios.get('/api/v1/config/paypal');\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\n      script.async = true;\n\n      script.onload = () => {\n        setSdkReady(true);\n      };\n\n      document.body.appendChild(script);\n    };\n\n    if (!order || successPay) {\n      dispatch({\n        type: ORDER_PAY_RESET\n      });\n      dispatch(getOrderDetails(orderId));\n    } else if (!order.isPaid) {\n      if (!window.paypal) {\n        addPayPalScript();\n      } else {\n        setSdkReady(true);\n      }\n    }\n  }, [orderId, dispatch, successPay, order]);\n\n  const successPaymentHandler = paymentResult => {\n    dispatch(payOrder(orderId, paymentResult));\n  };\n\n  return loading ? /*#__PURE__*/React.createElement(Loader, null) : error ? /*#__PURE__*/React.createElement(Message, {\n    variant: \"danger\"\n  }, error) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", null, \"Order \", order._id), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Col, {\n    md: 8\n  }, /*#__PURE__*/React.createElement(ListGroup, {\n    variant: \"flush\"\n  }, /*#__PURE__*/React.createElement(ListGroup.Item, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Shipping\"), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Name: \"), \" \", order.user.name), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Email: \"), \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: `mailto:${order.user.email}`\n  }, order.user.email)), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Address:\"), (_order$shippingAddres = order.shippingAddress) === null || _order$shippingAddres === void 0 ? void 0 : _order$shippingAddres.address, \",\", (_order$shippingAddres2 = order.shippingAddress) === null || _order$shippingAddres2 === void 0 ? void 0 : _order$shippingAddres2.city, \" \", (_order$shippingAddres3 = order.shippingAddress) === null || _order$shippingAddres3 === void 0 ? void 0 : _order$shippingAddres3.postalCode, \",\", ' ', (_order$shippingAddres4 = order.shippingAddress) === null || _order$shippingAddres4 === void 0 ? void 0 : _order$shippingAddres4.country), order.isDeliverd ? /*#__PURE__*/React.createElement(Message, {\n    variant: \"success\"\n  }, \"Deliverd on \", order.DeliverdAt) : /*#__PURE__*/React.createElement(Message, {\n    variant: \"danger\"\n  }, \"Not Deliverd\")), /*#__PURE__*/React.createElement(ListGroup.Item, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Payment Method\"), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Method:\"), order.paymentMethod), order.isPaid ? /*#__PURE__*/React.createElement(Message, {\n    variant: \"success\"\n  }, \"Paid on \", order.paidAt) : /*#__PURE__*/React.createElement(Message, {\n    variant: \"danger\"\n  }, \"Not Paid\")), /*#__PURE__*/React.createElement(ListGroup.Item, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Order Items\"), /*#__PURE__*/React.createElement(\"strong\", null, \"Method:\"), !order.orderItems.length ? /*#__PURE__*/React.createElement(Message, null, \"Order is empty\") : /*#__PURE__*/React.createElement(ListGroup, {\n    variant: \"flush\"\n  }, order.orderItems.map((item, index) => /*#__PURE__*/React.createElement(ListGroup.Item, {\n    key: index\n  }, /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Col, {\n    md: 1\n  }, /*#__PURE__*/React.createElement(Image, {\n    src: item.image,\n    alt: item.name,\n    fluid: true,\n    rounded: true\n  })), /*#__PURE__*/React.createElement(Col, null, /*#__PURE__*/React.createElement(Link, {\n    to: `/product/${item.product}`\n  }, item.name)), /*#__PURE__*/React.createElement(Col, {\n    md: 4\n  }, item.qty, \" x $\", item.price, \" = $\", item.qty * item.price)))))))), /*#__PURE__*/React.createElement(Col, {\n    md: 4\n  }, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(ListGroup, {\n    variant: \"flush\"\n  }, /*#__PURE__*/React.createElement(ListGroup.Item, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Order Summary\")), /*#__PURE__*/React.createElement(ListGroup.Item, null, /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Col, null, \"Items\"), /*#__PURE__*/React.createElement(Col, null, \"$\", order.itemsPrice))), /*#__PURE__*/React.createElement(ListGroup.Item, null, /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Col, null, \"Shipping\"), /*#__PURE__*/React.createElement(Col, null, \"$\", order.shippingPrice))), /*#__PURE__*/React.createElement(ListGroup.Item, null, /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Col, null, \"Tax\"), /*#__PURE__*/React.createElement(Col, null, \"$\", order.taxPrice))), /*#__PURE__*/React.createElement(ListGroup.Item, null, /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Col, null, \"Total\"), /*#__PURE__*/React.createElement(Col, null, \"$\", order.totalPrice))), !order.isPaid && /*#__PURE__*/React.createElement(ListGroup.Item, null, loadingPay && /*#__PURE__*/React.createElement(Loader, null), !sdkReady ? /*#__PURE__*/React.createElement(Loader, null) : /*#__PURE__*/React.createElement(PayPalButton, {\n    amount: order.totalPrice,\n    onSuccess: successPaymentHandler\n  })))))));\n};\n\nexport default OrderScreen;","map":{"version":3,"sources":["/home/ad.rapidops.com/kishor.rathva/Worspace/hapi-mongo-ts/client/src/screens/OrderScreen.tsx"],"names":["React","useEffect","useState","axios","PayPalButton","Link","Row","Col","ListGroup","Image","Card","useSelector","useDispatch","Message","Loader","getOrderDetails","payOrder","ORDER_PAY_RESET","addDecimals","num","Math","round","toFixed","OrderScreen","match","sdkReady","setSdkReady","orderId","setOrderId","dispatch","order","loading","error","state","orderDetails","loadingPay","success","successPay","orderPay","itemsPrice","orderItems","reduce","acc","item","price","qty","params","id","addPayPalScript","data","clientId","get","script","document","createElement","type","src","async","onload","body","appendChild","isPaid","window","paypal","successPaymentHandler","paymentResult","_id","user","name","email","shippingAddress","address","city","postalCode","country","isDeliverd","DeliverdAt","paymentMethod","paidAt","length","map","index","image","product","shippingPrice","taxPrice","totalPrice"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButton } from 'react-paypal-button-v2';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { getOrderDetails, payOrder } from '../actions/orderActions';\nimport { ORDER_PAY_RESET } from '../constants/orderConstants';\n\ninterface Props {\n  match: any;\n}\n\nconst addDecimals = (num: number) => {\n  return (Math.round(num * 100) / 100).toFixed(2);\n};\n\nconst OrderScreen: FunctionComponent<Props> = ({ match }) => {\n  // const orderId = match.params.id;\n  // console.log({ orderId });\n  const [sdkReady, setSdkReady] = useState(false);\n  const [orderId, setOrderId] = useState('');\n  const dispatch = useDispatch();\n\n  const { order, loading, error } = useSelector((state: any) => state.orderDetails);\n  const { loading: loadingPay, success: successPay } = useSelector((state: any) => state.orderPay);\n  if (!loading && order) {\n    order.itemsPrice = addDecimals(order.orderItems.reduce((acc: any, item: any) => acc + item.price * item.qty, 0));\n  }\n\n  useEffect(() => {\n    setOrderId(match.params.id);\n    const addPayPalScript = async () => {\n      const { data: clientId } = await axios.get('/api/v1/config/paypal');\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\n      script.async = true;\n      script.onload = () => {\n        setSdkReady(true);\n      };\n      document.body.appendChild(script);\n    };\n    if (!order || successPay) {\n      dispatch({ type: ORDER_PAY_RESET });\n      dispatch(getOrderDetails(orderId));\n    } else if (!order.isPaid) {\n      if (!(window as any).paypal) {\n        addPayPalScript();\n      } else {\n        setSdkReady(true);\n      }\n    }\n  }, [orderId, dispatch, successPay, order]);\n\n  const successPaymentHandler = (paymentResult: any) => {\n    dispatch(payOrder(orderId, paymentResult));\n  };\n\n  return loading ? (\n    <Loader />\n  ) : error ? (\n    <Message variant=\"danger\">{error}</Message>\n  ) : (\n    <>\n      <h1>Order {order._id}</h1>\n      <Row>\n        <Col md={8}>\n          <ListGroup variant=\"flush\">\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>\n                <strong>Name: </strong> {order.user.name}\n              </p>\n              <p>\n                <strong>Email: </strong> <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n              </p>\n              <p>\n                <strong>Address:</strong>\n                {order.shippingAddress?.address},{order.shippingAddress?.city} {order.shippingAddress?.postalCode},{' '}\n                {order.shippingAddress?.country}\n              </p>\n              {order.isDeliverd ? (\n                <Message variant=\"success\">Deliverd on {order.DeliverdAt}</Message>\n              ) : (\n                <Message variant=\"danger\">Not Deliverd</Message>\n              )}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <p>\n                <strong>Method:</strong>\n                {order.paymentMethod}\n              </p>\n              {order.isPaid ? (\n                <Message variant=\"success\">Paid on {order.paidAt}</Message>\n              ) : (\n                <Message variant=\"danger\">Not Paid</Message>\n              )}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              <strong>Method:</strong>\n              {!order.orderItems.length ? (\n                <Message>Order is empty</Message>\n              ) : (\n                <ListGroup variant=\"flush\">\n                  {order.orderItems.map((item: any, index: number) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image src={item.image} alt={item.name} fluid rounded />\n                        </Col>\n                        <Col>\n                          <Link to={`/product/${item.product}`}>{item.name}</Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n        <Col md={4}>\n          <Card>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>${order.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping</Col>\n                  <Col>${order.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>${order.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>${order.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              {!order.isPaid && (\n                <ListGroup.Item>\n                  {loadingPay && <Loader />}\n                  {!sdkReady ? (\n                    <Loader />\n                  ) : (\n                    <PayPalButton amount={order.totalPrice} onSuccess={successPaymentHandler} />\n                  )}\n                </ListGroup.Item>\n              )}\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default OrderScreen;\n"]},"metadata":{},"sourceType":"module"}