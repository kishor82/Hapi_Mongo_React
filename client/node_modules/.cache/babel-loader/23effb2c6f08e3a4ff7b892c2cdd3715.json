{"ast":null,"code":"var _jsxFileName = \"/home/ad.rapidops.com/kishor.rathva/Worspace/hapi-mongo-ts/client/src/screens/UserListScreen.tsx\";\nimport React, { useEffect } from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Table, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { listUsers, deleteUser } from '../actions/userActions';\n\nconst UserListScreen = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    loading,\n    error,\n    users\n  } = useSelector(state => state.userList);\n  const {\n    userInfo\n  } = useSelector(state => state.userLogin);\n  const {\n    success: successDelete\n  } = useSelector(state => state.userDelete);\n  useEffect(() => {\n    if (userInfo && userInfo.isAdmin) {\n      dispatch(listUsers());\n    } else {\n      history.push('/login');\n    }\n  }, [dispatch, history, userInfo, successDelete]);\n\n  const deleteHandler = id => {\n    swal({\n      title: 'Are you sure?',\n      text: 'Once deleted, you will not be able to recover this user!',\n      icon: 'warning',\n      buttons: [true, true],\n      dangerMode: true\n    }).then(willDelete => {\n      if (willDelete) {\n        dispatch(deleteUser(id));\n        swal('User has been deleted!', {\n          icon: 'success'\n        });\n      }\n    }); // if (window.confirm('Are you sure you want to delete?')) {\n    //   dispatch(deleteUser(id));\n    // }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", null, \"Users\"), loading ? /*#__PURE__*/React.createElement(Loader, null) : error ? /*#__PURE__*/React.createElement(Message, {\n    variant: \"danger\"\n  }, error) : /*#__PURE__*/React.createElement(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    responsive: true,\n    className: \"table-sm\"\n  }, /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"th\", null, \"ID\"), /*#__PURE__*/React.createElement(\"th\", null, \"NAME\"), /*#__PURE__*/React.createElement(\"th\", null, \"EMAIL\"), /*#__PURE__*/React.createElement(\"th\", null, \"ADMIN\"), /*#__PURE__*/React.createElement(\"th\", null))), /*#__PURE__*/React.createElement(\"tbody\", null, users.map(user => /*#__PURE__*/React.createElement(\"tr\", {\n    key: user._id\n  }, /*#__PURE__*/React.createElement(\"td\", null, user._id), /*#__PURE__*/React.createElement(\"td\", null, user.name), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"a\", {\n    href: `mailto:${user.email}`\n  }, user.email)), /*#__PURE__*/React.createElement(\"td\", null, user.isAdmin ? /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-check\",\n    style: {\n      color: 'green'\n    }\n  }) : /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-times\",\n    style: {\n      color: 'red'\n    }\n  })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(LinkContainer, {\n    to: `/user/${user._id}/edit`\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"light\",\n    className: \"btn-sm\"\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-edit\"\n  }))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"danger\",\n    className: \"btn-sm\",\n    onClick: () => deleteHandler(user._id)\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-trash\"\n  }))))))));\n};\n\nexport default UserListScreen;","map":{"version":3,"sources":["/home/ad.rapidops.com/kishor.rathva/Worspace/hapi-mongo-ts/client/src/screens/UserListScreen.tsx"],"names":["React","useEffect","LinkContainer","Table","Button","useDispatch","useSelector","useHistory","swal","Message","Loader","listUsers","deleteUser","UserListScreen","dispatch","history","loading","error","users","state","userList","userInfo","userLogin","success","successDelete","userDelete","isAdmin","push","deleteHandler","id","title","text","icon","buttons","dangerMode","then","willDelete","map","user","_id","name","email","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAoD,OAApD;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;;AAIA,MAAMC,cAAwC,GAAG,MAAM;AACrD,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,OAAO,GAAGR,UAAU,EAA1B;AAEA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA4BZ,WAAW,CAAEa,KAAD,IAAgBA,KAAK,CAACC,QAAvB,CAA7C;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAef,WAAW,CAAEa,KAAD,IAAgBA,KAAK,CAACG,SAAvB,CAAhC;AACA,QAAM;AAAEC,IAAAA,OAAO,EAAEC;AAAX,MAA6BlB,WAAW,CAAEa,KAAD,IAAgBA,KAAK,CAACM,UAAvB,CAA9C;AAEAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,QAAQ,IAAIA,QAAQ,CAACK,OAAzB,EAAkC;AAChCZ,MAAAA,QAAQ,CAACH,SAAS,EAAV,CAAR;AACD,KAFD,MAEO;AACLI,MAAAA,OAAO,CAACY,IAAR,CAAa,QAAb;AACD;AACF,GANQ,EAMN,CAACb,QAAD,EAAWC,OAAX,EAAoBM,QAApB,EAA8BG,aAA9B,CANM,CAAT;;AAQA,QAAMI,aAAa,GAAIC,EAAD,IAAgB;AACpCrB,IAAAA,IAAI,CAAC;AACHsB,MAAAA,KAAK,EAAE,eADJ;AAEHC,MAAAA,IAAI,EAAE,0DAFH;AAGHC,MAAAA,IAAI,EAAE,SAHH;AAIHC,MAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,IAAP,CAJN;AAKHC,MAAAA,UAAU,EAAE;AALT,KAAD,CAAJ,CAMGC,IANH,CAMSC,UAAD,IAAgB;AACtB,UAAIA,UAAJ,EAAgB;AACdtB,QAAAA,QAAQ,CAACF,UAAU,CAACiB,EAAD,CAAX,CAAR;AACArB,QAAAA,IAAI,CAAC,wBAAD,EAA2B;AAC7BwB,UAAAA,IAAI,EAAE;AADuB,SAA3B,CAAJ;AAGD;AACF,KAbD,EADoC,CAepC;AACA;AACA;AACD,GAlBD;;AAmBA,sBACE,uDACE,wCADF,EAEGhB,OAAO,gBACN,oBAAC,MAAD,OADM,GAEJC,KAAK,gBACP,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAC;AAAjB,KAA2BA,KAA3B,CADO,gBAGP,oBAAC,KAAD;AAAO,IAAA,OAAO,MAAd;AAAe,IAAA,QAAQ,MAAvB;AAAwB,IAAA,KAAK,MAA7B;AAA8B,IAAA,UAAU,MAAxC;AAAyC,IAAA,SAAS,EAAC;AAAnD,kBACE,gDACE,6CACE,qCADF,eAEE,uCAFF,eAGE,wCAHF,eAIE,wCAJF,eAKE,+BALF,CADF,CADF,eAUE,mCACGC,KAAK,CAACmB,GAAN,CAAWC,IAAD,iBACT;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC;AAAd,kBACE,gCAAKD,IAAI,CAACC,GAAV,CADF,eAEE,gCAAKD,IAAI,CAACE,IAAV,CAFF,eAGE,6CACE;AAAG,IAAA,IAAI,EAAG,UAASF,IAAI,CAACG,KAAM;AAA9B,KAAkCH,IAAI,CAACG,KAAvC,CADF,CAHF,eAME,gCACGH,IAAI,CAACZ,OAAL,gBACC;AAAG,IAAA,SAAS,EAAC,cAAb;AAA4B,IAAA,KAAK,EAAE;AAAEgB,MAAAA,KAAK,EAAE;AAAT;AAAnC,IADD,gBAGC;AAAG,IAAA,SAAS,EAAC,cAAb;AAA4B,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAK,EAAE;AAAT;AAAnC,IAJJ,CANF,eAaE,6CACE,oBAAC,aAAD;AAAe,IAAA,EAAE,EAAG,SAAQJ,IAAI,CAACC,GAAI;AAArC,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,OAAhB;AAAwB,IAAA,SAAS,EAAC;AAAlC,kBACE;AAAG,IAAA,SAAS,EAAC;AAAb,IADF,CADF,CADF,eAME,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,QAAhB;AAAyB,IAAA,SAAS,EAAC,QAAnC;AAA4C,IAAA,OAAO,EAAE,MAAMX,aAAa,CAACU,IAAI,CAACC,GAAN;AAAxE,kBACE;AAAG,IAAA,SAAS,EAAC;AAAb,IADF,CANF,CAbF,CADD,CADH,CAVF,CAPJ,CADF;AAkDD,CAtFD;;AAwFA,eAAe1B,cAAf","sourcesContent":["import React, { useEffect, FunctionComponent } from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Table, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { listUsers, deleteUser } from '../actions/userActions';\n\ninterface Props {}\n\nconst UserListScreen: FunctionComponent<Props> = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { loading, error, users } = useSelector((state: any) => state.userList);\n\n  const { userInfo } = useSelector((state: any) => state.userLogin);\n  const { success: successDelete } = useSelector((state: any) => state.userDelete);\n\n  useEffect(() => {\n    if (userInfo && userInfo.isAdmin) {\n      dispatch(listUsers());\n    } else {\n      history.push('/login');\n    }\n  }, [dispatch, history, userInfo, successDelete]);\n\n  const deleteHandler = (id: string) => {\n    swal({\n      title: 'Are you sure?',\n      text: 'Once deleted, you will not be able to recover this user!',\n      icon: 'warning',\n      buttons: [true, true],\n      dangerMode: true,\n    }).then((willDelete) => {\n      if (willDelete) {\n        dispatch(deleteUser(id));\n        swal('User has been deleted!', {\n          icon: 'success',\n        });\n      }\n    });\n    // if (window.confirm('Are you sure you want to delete?')) {\n    //   dispatch(deleteUser(id));\n    // }\n  };\n  return (\n    <>\n      <h1>Users</h1>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <Table striped bordered hover responsive className=\"table-sm\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>NAME</th>\n              <th>EMAIL</th>\n              <th>ADMIN</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {users.map((user: any) => (\n              <tr key={user._id}>\n                <td>{user._id}</td>\n                <td>{user.name}</td>\n                <td>\n                  <a href={`mailto:${user.email}`}>{user.email}</a>\n                </td>\n                <td>\n                  {user.isAdmin ? (\n                    <i className=\"fas fa-check\" style={{ color: 'green' }}></i>\n                  ) : (\n                    <i className=\"fas fa-times\" style={{ color: 'red' }}></i>\n                  )}\n                </td>\n                <td>\n                  <LinkContainer to={`/user/${user._id}/edit`}>\n                    <Button variant=\"light\" className=\"btn-sm\">\n                      <i className=\"fas fa-edit\"></i>\n                    </Button>\n                  </LinkContainer>\n                  <Button variant=\"danger\" className=\"btn-sm\" onClick={() => deleteHandler(user._id)}>\n                    <i className=\"fas fa-trash\"></i>\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </>\n  );\n};\n\nexport default UserListScreen;\n"]},"metadata":{},"sourceType":"module"}