{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer } from './reducers/userRedusers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems') || '{}') : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo') || '{}') : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress') || '{}') : {};\nconst intitialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, intitialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/home/ad.rapidops.com/kishor.rathva/Worspace/hapi-mongo-ts/client/src/store.ts"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","orderCreate","orderDetails","orderPay","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","intitialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA0E,OAA1E;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,4BAA1D;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,gBADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,wBAJF,QAKO,yBALP;AAMA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,eAAlD,QAAyE,0BAAzE;AACA,MAAMC,OAAO,GAAGd,eAAe,CAAC;AAC9Be,EAAAA,WAAW,EAAEX,kBADiB;AAE9BY,EAAAA,cAAc,EAAEX,qBAFc;AAG9BY,EAAAA,IAAI,EAAEX,WAHwB;AAI9BY,EAAAA,SAAS,EAAEX,gBAJmB;AAK9BY,EAAAA,YAAY,EAAEX,mBALgB;AAM9BY,EAAAA,WAAW,EAAEX,kBANiB;AAO9BY,EAAAA,iBAAiB,EAAEX,wBAPW;AAQ9BY,EAAAA,WAAW,EAAEX,kBARiB;AAS9BY,EAAAA,YAAY,EAAEX,mBATgB;AAU9BY,EAAAA,QAAQ,EAAEX;AAVoB,CAAD,CAA/B;AAaA,MAAMY,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACzBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,KAAqC,IAAhD,CADyB,GAEzB,EAFJ;AAGA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,KAAoC,IAA/C,CADwB,GAExB,IAFJ;AAIA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAC/BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,KAA2C,IAAtD,CAD+B,GAE/B,EAFJ;AAGA,MAAMK,aAAkB,GAAG;AACzBf,EAAAA,IAAI,EAAE;AACJgB,IAAAA,SAAS,EAAER,oBADP;AAEJS,IAAAA,eAAe,EAAEH;AAFb,GADmB;AAKzBb,EAAAA,SAAS,EAAE;AAAEiB,IAAAA,QAAQ,EAAEL;AAAZ;AALc,CAA3B;AAQA,MAAMM,UAAwB,GAAG,CAAClC,KAAD,CAAjC;AAEA,MAAMmC,KAAK,GAAGtC,WAAW,CAACe,OAAD,EAAUkB,aAAV,EAAyB7B,mBAAmB,CAACF,eAAe,CAAC,GAAGmC,UAAJ,CAAhB,CAA5C,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware, Middleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport {\n  userLoginReducer,\n  userRegisterReducer,\n  userDetailsReducer,\n  userUpdateProfileReducer,\n} from './reducers/userRedusers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n});\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems')\n  ? JSON.parse(localStorage.getItem('cartItems') || '{}')\n  : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo')\n  ? JSON.parse(localStorage.getItem('userInfo') || '{}')\n  : null;\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress')\n  ? JSON.parse(localStorage.getItem('shippingAddress') || '{}')\n  : {};\nconst intitialState: any = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage,\n  },\n  userLogin: { userInfo: userInfoFromStorage },\n};\n\nconst middleware: Middleware[] = [thunk];\n\nconst store = createStore(reducer, intitialState, composeWithDevTools(applyMiddleware(...middleware)));\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}